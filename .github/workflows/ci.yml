name: Build & Deploy Frontend to Helios

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file from secrets and vars
        env:
          ALL_SECRETS: ${{ toJSON(secrets) }}
          ALL_VARS: ${{ toJSON(vars) }}
        run: |
          python << 'PYTHON'
          import json
          import os
          
          secrets = json.loads(os.environ.get('ALL_SECRETS', '{}'))
          vars = json.loads(os.environ.get('ALL_VARS', '{}'))
          
          with open('.env', 'w') as f:
              for key, value in {**secrets, **vars}.items():
                  if key not in ['SSH_KEY', 'SSH_HOST', 'SSH_PORT', 'SSH_USER', 'github_token']:
                      f.write(f'{key}={value}\n')
          PYTHON
          
          echo "Created .env with $(wc -l < .env) variables"

      - name: Build project
        run: npm run build

      - name: Create deployment archive
        run: |
          cd dist
          tar -czf ../dist.tar.gz .
          cd ..
          echo "Archive size: $(du -h dist.tar.gz | cut -f1)"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist.tar.gz
          retention-days: 7

  promote:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: .

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_key
          chmod 600 ~/.ssh/id_key
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Upload dist to server
        run: |
          scp -P "${{ secrets.SSH_PORT }}" -i ~/.ssh/id_key \
            dist.tar.gz \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/dist.tar.gz"

      - name: Deploy to public_html
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" -i ~/.ssh/id_key \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" << 'ENDSSH'
          set -x
          echo "=== Starting deployment ==="
          
          # Create public_html if it doesn't exist
          echo "Creating public_html directory..."
          mkdir -p ~/public_html
          
          # Backup current deployment (if exists)
          if [ -d ~/public_html ] && [ -n "$(ls -A ~/public_html 2>/dev/null)" ]; then
            echo "Backing up current deployment..."
            mkdir -p ~/public_html_backups
            BACKUP_FILE=~/public_html_backups/backup_$(date +%Y%m%d_%H%M%S).tar.gz
            tar -czf "$BACKUP_FILE" -C ~/public_html .
            echo "Backup created: $BACKUP_FILE"
            
            # Keep only last 5 backups
            cd ~/public_html_backups
            ls -t backup_*.tar.gz 2>/dev/null | tail -n +6 | while read f; do rm -f "$f"; done
            cd ~
          else
            echo "No existing deployment to backup"
          fi
          
          # Clear public_html
          echo "Clearing public_html..."
          rm -rf ~/public_html/*
          
          # Extract new build
          echo "Extracting new build..."
          if [ -f ~/dist.tar.gz ]; then
            tar -xzf ~/dist.tar.gz -C ~/public_html
            echo "Extraction completed"
          else
            echo "ERROR: dist.tar.gz not found!"
            exit 1
          fi
          
          # Cleanup
          rm -f ~/dist.tar.gz
          
          echo "=== Deployment completed successfully! ==="
          echo "Files in public_html:"
          ls -lah ~/public_html
          ENDSSH

      - name: Verify deployment
        run: |
          ssh -n -p "${{ secrets.SSH_PORT }}" -i ~/.ssh/id_key \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            'test -f ~/public_html/index.html && echo "✓ Deployment verified: index.html exists" || (echo "✗ Deployment failed: index.html not found" && exit 1)'

